import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import abi from "../constants/abi.json";
import { useEffect, useState } from "react";
import { ethers } from "ethers";
import { MetaMaskInpageProvider } from "@metamask/providers";

declare global {
  interface Window {
    ethereum?: MetaMaskInpageProvider;
  }
}

const Home: NextPage = () => {
  const contractAddress = "0x9Ea02Acd4C2701a7729Af23E6a58074158aF8f46";
  const contractABI = abi.abi;

  const [currentAccount, setCurrentAccount] = useState("");
  const [name, setName] = useState("");
  const [message, setMessage] = useState("");
  const [contractBalance, setContractBalance] = useState("0");
  const [notes, setNotes] = useState<any>([]);

  const getContractBalance = () => {
    const provider = ethers.getDefaultProvider("goerli");
    provider.getBalance(contractAddress).then((balance) => {
      // convert from wei to ether
      const balanceInEth = ethers.utils.formatEther(balance);
      setContractBalance(balanceInEth);
    });
  };

  useEffect(() => {
    getContractBalance();
  }, []);

  const isWalletConnected = async () => {
    try {
      const { ethereum } = window;
      const accounts = await ethereum.request({ method: "eth_accounts" });
      console.log("accounts: ", accounts);
      if (accounts.length > 0) {
        const account = accounts[0];
        console.log("wallet is connected! " + account);
      } else {
        console.log("make sure metamask is connected");
      }
    } catch (err) {
      console.log("error: ", err);
    }
  };

  const connectWallet = async () => {
    try {
      const { ethereum } = window;
      if (!ethereum) {
        alert("please install metamask");
      }
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      setCurrentAccount(accounts[0]);
    } catch (err) {
      console.log(err);
    }
  };

  const donate = async () => {
    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum, "any");
        const signer = provider.getSigner();
        const fundMe = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        );
        console.log("funding...");
        const fundTXN = await fundMe.fund(
          name ? name : "anon",
          message ? message : "I have donated",
          { value: ethers.utils.parseEther("0.001") }
        );
        await fundTXN.wait();
        console.log("mined", fundTXN.hash);
        alert("Thanks for the donation!");
        setName("");
        setMessage("");
        getContractBalance();
      }
    } catch (err) {
      console.log(err);
    }
  };

  const getNotes = async () => {
    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const fundMe = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        );
        console.log("fetching notes from the blockchain...");
        const notes = await fundMe.getNotes();
        setNotes(notes);
      } else {
        alert("Wallet connected");
      }
    } catch (err) {
      console.log("Metamask not connected");
    }
  };

  useEffect(() => {
    let fundMe: any;
    isWalletConnected();
    getNotes();

    const onNewNote = (
      from: string,
      timestamp: number,
      name: string,
      message: string
    ) => {
      console.log("Note recieved: ", from, timestamp, name, message);
      setNotes((prevState: any) => [
        ...prevState,
        { address: from, timestamp: new Date(timestamp * 1000), message, name },
      ]);
    };

    const { ethereum } = window;

    if (ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();
      fundMe = new ethers.Contract(contractAddress, contractABI, signer);
      fundMe.on("NewNote", onNewNote);
    }

    return () => {
      if (fundMe) {
        fundMe.off("NewNote", onNewNote);
      }
    };
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Go Fund Me Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>Contract Balance: {contractBalance}</h1>
        <h1>Contract Address: {contractAddress}</h1>
        <h1 className={styles.title}>Give Kenny some eth</h1>

        {currentAccount ? (
          <div>
            <form>
              <div>
                <label>Name</label>
                <br />
                <input
                  type="text"
                  placeholder="anon"
                  className="p-2 rounded border border-gray-200 bg-gray-200 focus:bg-white focus:outline-none focus:ring-2 focus:ring-yellow-600 focus:border-transparent text-black"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
              </div>
              <br />
              <div>
                <label
                  htmlFor="message"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400"
                >
                  Send Kehinde a message
                </label>
                <textarea
                  id="message"
                  rows={3}
                  className="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-200 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="Your message..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                ></textarea>
              </div>
              <div className="flex justify-center mt-1">
                <button
                  type="button"
                  className="border border-indigo-500 bg-indigo-500 text-white rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:bg-indigo-600 focus:outline-none focus:shadow-outline"
                  onClick={donate}
                >
                  Donate 0.001ETH
                </button>
              </div>
            </form>
          </div>
        ) : (
          <button
            type="button"
            className="border border-indigo-500 bg-indigo-500 text-white rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:bg-indigo-600 focus:outline-none focus:shadow-outline"
            onClick={connectWallet}
          >
            Connect your wallet
          </button>
        )}
      </main>
    </div>
  );
};

export default Home;
